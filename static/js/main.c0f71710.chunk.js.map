{"version":3,"sources":["Visualizer.js","SongList.js","App.js","serviceWorker.js","index.js"],"names":["canvas","ctx","analyser","fbc_array","bars","bar_x","bar_width","bar_height","SongList","_this","this","_this$props","props","user","savedTracks","react_default","a","createElement","style","width","textAlign","backgroundColor","margin","padding","color","maxHeight","overflow","map","track","i","key","className","fontSize","onClick","event","onSongClicked","name","artists","album","React","Component","audiotag","Audio","crossOrigin","Visualizer","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","componentDidMount","context","window","AudioContext","webkitAudioContext","webAudioTouchUnlock","then","unlocked","reason","console","error","createAnalyser","document","getElementById","getContext","createMediaElementSource","connect","destination","fftSize","height","componentDidUpdate","prevProps","prevState","currentSong","src","preview_url","load","play","setState","isPlaying","hasPlayed","checkRenderType","checkActiveButton","buttons","getElementsByTagName","length","id","state","renderType","setAttribute","renderBars","requestAnimationFrame","Uint8Array","frequencyBinCount","getByteFrequencyData","clearRect","fillStyle","renderColor","fillRect","renderLine","next_bar_height","strokeStyle","beginPath","moveTo","lineTo","stroke","renderSquares","renderCircle","arc","Math","PI","onPlayPauseClick","pause","setRenderType","targetID","_this2","target","App","accessToken","queryString","parse","location","search","access_token","fetch","headers","Authorization","response","json","data","display_name","trackData","tracks","items","trackObject","err","log","targetSong","Fragment","display","justifyContent","flexWrap","flexDirection","alt","images","url","fontWeight","alignItems","src_Visualizer_0","audio","src_SongList_0","href","includes","marginTop","borderRadius","border","Boolean","hostname","match","ReactDOM","render","src_App_0","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.c0f71710.chunk.js","sourcesContent":["import React from 'react';\r\nimport './Visualizer.css';\r\nimport webAudioTouchUnlock from 'web-audio-touch-unlock';\r\n\r\n\r\nlet audiotag = new Audio()\r\naudiotag.crossOrigin = 'anonymous'\r\n//all variables for Analyser\r\nlet canvas, ctx, source, context, analyser, fbc_array, bars, bar_x, bar_width, bar_height\r\n\r\nclass Visualizer extends React.Component{\r\n    constructor(){\r\n        super()\r\n        this.state = {\r\n            isPlaying: false, \r\n            hasPlayed: false,\r\n            renderType: 'circle',\r\n            renderColor: 'white'\r\n        }\r\n    } \r\n\r\n    componentDidMount = () => {\r\n        let context = new (window.AudioContext || window.webkitAudioContext)();\r\n \r\n        webAudioTouchUnlock(context)\r\n        .then(function (unlocked) {\r\n            if(unlocked) {\r\n                // AudioContext was unlocked from an explicit user action, sound should start playing now\r\n            } else {\r\n                // There was no need for unlocking, devices other than iOS\r\n            }\r\n        }, function(reason) {\r\n            console.error(reason);\r\n        });\r\n            \r\n        // Do all your sound related stuff here \r\n        // as you normally would like if the sound \r\n        // was never locked\r\n        // ...\r\n        analyser = context.createAnalyser()\r\n        canvas = document.getElementById('canvas')\r\n        ctx = canvas.getContext('2d')\r\n\r\n        //route audio playback\r\n        //into the processing graph of AudioContext\r\n        source = context.createMediaElementSource(audiotag)\r\n        source.connect(analyser)\r\n        analyser.connect(context.destination)\r\n        analyser.fftSize = 256;\r\n        canvas.style.width = (canvas.width = 500) + \"px\"\r\n        canvas.style.height = (canvas.height = 500) + \"px\"\r\n\r\n    }   \r\n        \r\n\r\n   \r\n    componentDidUpdate = (prevProps, prevState) => {\r\n        if(prevProps.currentSong !== this.props.currentSong){\r\n            audiotag.src = this.props.currentSong.preview_url\r\n            audiotag.load()\r\n            audiotag.play()\r\n            this.setState({isPlaying: true, hasPlayed: true})\r\n        }\r\n\r\n        this.checkRenderType();\r\n        this.checkActiveButton();\r\n    }\r\n\r\n\r\n    \r\n    checkActiveButton = () => {\r\n        let buttons = document.getElementsByTagName('button')\r\n        for(let i = 0; i < buttons.length; i++){\r\n            if(buttons[i].id === this.state.renderType){\r\n                buttons[i].setAttribute('class', 'active')\r\n            }else{\r\n                buttons[i].setAttribute('class', 'inactive')\r\n            }\r\n        }\r\n    }\r\n\r\n    renderBars = () => {\r\n        requestAnimationFrame(this.renderBars)\r\n        fbc_array = new Uint8Array(analyser.frequencyBinCount)\r\n        analyser.getByteFrequencyData(fbc_array)\r\n        ctx.clearRect(0,0, canvas.width, canvas.height) //clear canvas\r\n\r\n        ctx.fillStyle = this.state.renderColor\r\n        bars = 100\r\n        for(let i = 0; i < bars; i +=3){\r\n            bar_x = i * 5\r\n            bar_width = 14\r\n            bar_height = -(fbc_array[i] * 2)\r\n            ctx.fillRect(bar_x, canvas.height, bar_width, bar_height)\r\n        }\r\n        \r\n    }\r\n\r\n    \r\n    renderLine = () => {\r\n        requestAnimationFrame(this.renderLine)\r\n        fbc_array = new Uint8Array(analyser.frequencyBinCount)\r\n        analyser.getByteFrequencyData(fbc_array)\r\n        ctx.clearRect(0,0, canvas.width, canvas.height) //clear canvas\r\n\r\n        ctx.fillStyle = this.state.renderColor\r\n        ctx.strokeStyle  = this.state.renderColor\r\n        bars = 100\r\n        \r\n        let next_bar_height\r\n\r\n        for(let i = 0; i < bars - 1; i++){\r\n            bar_x = i * 5\r\n            bar_width = 14\r\n            bar_height = (fbc_array[i]  * 2)\r\n            next_bar_height = (fbc_array[i+1]  * 2)\r\n\r\n            ctx.beginPath()\r\n            ctx.moveTo(i * 5, bar_height)\r\n            ctx.lineTo((i + 1) * 5, next_bar_height)\r\n            ctx.stroke();\r\n        }\r\n\r\n        \r\n    }\r\n\r\n    renderSquares = () => {\r\n        requestAnimationFrame(this.renderSquares)\r\n        fbc_array = new Uint8Array(analyser.frequencyBinCount)\r\n        analyser.getByteFrequencyData(fbc_array)\r\n        ctx.clearRect(0,0, canvas.width, canvas.height) //clear canvas\r\n\r\n        ctx.fillStyle = 'white'\r\n        bars = 100\r\n        \r\n        for(let i = 0; i < bars - 1; i+=3){\r\n            bar_x = i * 3\r\n            bar_width = 8\r\n            bar_height = (fbc_array[i] / 2)\r\n            \r\n            ctx.fillRect(bar_x, bar_height, bar_width, bar_height);\r\n        }\r\n    }\r\n\r\n    renderCircle = () => {\r\n        requestAnimationFrame(this.renderCircle)\r\n        fbc_array = new Uint8Array(analyser.frequencyBinCount)\r\n        analyser.getByteFrequencyData(fbc_array)\r\n        ctx.clearRect(0,0, canvas.width, canvas.height) //clear canvas\r\n        ctx.strokeStyle = 'white'\r\n\r\n        bars = 100\r\n        for(let i = 0; i < bars - 1; i +=9){\r\n            bar_height = fbc_array[i] \r\n            ctx.beginPath();\r\n            ctx.arc(250, 250, bar_height * .75, 0, 2 * Math.PI);\r\n            ctx.stroke();\r\n        }   \r\n    }\r\n\r\n    onPlayPauseClick = () => {\r\n    \r\n        if(!this.state.isPlaying){\r\n            audiotag.play()\r\n            this.setState({isPlaying: true})\r\n        }else{\r\n            audiotag.pause()\r\n            this.setState({isPlaying: false})\r\n        }\r\n    }\r\n\r\n    checkRenderType = () => {\r\n        switch(this.state.renderType){\r\n            case 'bars':\r\n                requestAnimationFrame(this.renderBars)\r\n                break\r\n            case 'line':\r\n                requestAnimationFrame(this.renderLine)\r\n                break\r\n            case 'square':\r\n                requestAnimationFrame(this.renderSquares)\r\n                break\r\n            case 'circle':\r\n                requestAnimationFrame(this.renderCircle)\r\n                break\r\n            default:\r\n                requestAnimationFrame(this.renderBars)\r\n        }\r\n    }\r\n\r\n    setRenderType = (targetID) => {\r\n        this.setState({renderType: targetID})\r\n    }\r\n\r\n\r\n    render(){\r\n        return(\r\n            <div style={{width: '500px'}} >\r\n                {\r\n                        this.state.hasPlayed ?\r\n                            <div style={{color: 'white'}}>\r\n                            {   \r\n                                this.state.isPlaying ?\r\n                                <div className='controls'>\r\n                                    <i onClick={this.onPlayPauseClick} className=\"fas fa-pause\"></i>\r\n                                    <div className='buttons'>\r\n                                        <button id='bars' onClick={event => this.setRenderType(event.target.id)} >Bars</button>\r\n                                        <button id='line' onClick={event => this.setRenderType(event.target.id)} >Line</button>\r\n                                        <button id='circle' onClick={event => this.setRenderType(event.target.id)} >Circles</button>\r\n                                    </div>\r\n                                </div>\r\n                                :<div className='controls'>\r\n                                    <i onClick={this.onPlayPauseClick} className=\"fas fa-play\"></i>\r\n                                    <div className='buttons'>\r\n                                        <button id='bars' onClick={event => this.setRenderType(event.target.id)}>Bars</button>\r\n                                        <button id='line' onClick={event => this.setRenderType(event.target.id)} >Line</button>\r\n                                        <button id='circle' onClick={event => this.setRenderType(event.target.id)} >Circles</button>\r\n                                    </div>\r\n                                </div>\r\n                            }\r\n                            </div>\r\n                        :   <h2>Play a song to visualize it</h2>\r\n                }\r\n                <div id='mp3_player'>\r\n                    <canvas style={{margin: '0', padding: '0'}} id='canvas'></canvas>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Visualizer;","import React from 'react';\r\nimport './SongList.css';\r\n\r\nclass SongList extends React.Component{\r\n\r\n    render(){\r\n      let {user,savedTracks} = this.props\r\n        return(\r\n        <div style={{width: '40em', 'textAlign': 'center'}}>\r\n            <h2 style={{backgroundColor: 'transparent', margin : 0, padding: '0 0 2em 0', color: 'white'}} >Songs</h2>\r\n            {\r\n              user ?\r\n              <div>\r\n                {\r\n                  savedTracks\r\n                  ?\r\n                  <div style={{maxHeight: '60vh', overflow: 'auto'}}>\r\n                    {\r\n                      savedTracks.map((track, i) => {\r\n                        return <div key={i} className='songList'>\r\n                                  <p \r\n                                    key={i + 16} \r\n                                    style={{textAlign: 'left', padding: '.5em 0 0 1em', margin: '0', color: 'white', fontSize: '1.2em'}}\r\n                                    onClick={event =>\r\n                                    this.props.onSongClicked(track) }\r\n                                    > \r\n                                      {track.name} \r\n                                  </p>\r\n                                  <p\r\n                                   key={i} \r\n                                   style={{textAlign: 'left', margin: '0', padding: '0 0 .5em 1.2em',     color: 'rgba(256,256,256, .6)', fontSize: '1em'}}\r\n                                   onClick={event =>\r\n                                   this.props.onSongClicked(track) }\r\n                                   >\r\n                                    {track.artists[0].name} &nbsp; &#8231; &nbsp; {track.album.name}\r\n                                  </p>\r\n                                </div>\r\n                      })\r\n                    }\r\n                  </div>\r\n                  : <p>loading tracks...</p>\r\n                }\r\n              </div>\r\n              : \r\n              <div>\r\n                <p>loading</p>\r\n              </div>\r\n            }\r\n            \r\n        </div>\r\n\r\n        )\r\n    }\r\n}\r\n\r\nexport default SongList;","import React, { Component } from 'react';\nimport './App.css';\nimport queryString from 'query-string';\nimport SongList from './SongList';\nimport Visualizer from './Visualizer';\n\n\nclass App extends Component {\n  constructor(){\n    super()\n    this.state ={\n      currentSong: null,\n      user: '',\n      savedTracks: ''\n    }\n  }\n\n  componentDidMount = () =>{\n    let parsed = queryString.parse(window.location.search)\n    let accessToken = parsed.access_token\n    if(!accessToken){\n      return\n    }\n\n    //get user's name and id\n    fetch(\n      'https://api.spotify.com/v1/me', \n      {headers: {'Authorization': 'Bearer ' + accessToken}\n    }).then(response =>  response.json())\n    .then(data => {\n      this.setState({\n        user: {\n          name: data.display_name,\n          id: data.id\n        }\n      })\n    })\n\n   fetch(\n    'https://api.spotify.com/v1/me/tracks', \n    {headers: {'Authorization': 'Bearer ' + accessToken}\n  }).then(response =>  response.json())\n  .then(trackData => {\n    let trackObjects = trackData.items\n    let tracks = trackObjects.map(trackObject => trackObject.track)\n    this.setState({\n      savedTracks: tracks })\n  }, err => console.log(err))\n\n    \n}\n\n  onSongClicked = (targetSong) => {\n    this.setState({currentSong: targetSong})\n  }\n\n\n\n  render() {\n    return (\n      <div className=\"App\">\n      { \n        this.state.user ?\n          <React.Fragment>\n            {\n            this.state.currentSong ?\n            <div style={{display: 'flex', justifyContent: 'center', width: '100%', flexWrap: 'nowrap', flexDirection: 'row'}}>\n              <img alt='cover art' id='coverArt' src={this.state.currentSong.album.images[1].url}/>\n              <h1 id='title' style={{color: 'white', fontWeight: '600'}} >Spotify Visualizer</h1>\n            </div>\n            :<h1 id='title' style={{color: 'white', fontWeight: '600'}} >Spotify Visualizer</h1>\n            }\n            {\n            this.state.currentSong ?\n                <div style={{display: 'flex', justifyContent: 'center', flexWrap: 'nowrap', flexDirection: 'row', alignItems: 'center'}}>\n                  <h2 style={{color: 'white', fontWeight: '300', margin: '0', fontSize: '1.5em'}}>{this.state.currentSong.name}&nbsp; &#8231; &nbsp; {this.state.currentSong.artists[0].name}</h2>\n                </div>\n                :<h2 style={{color: 'transparent', fontWeight: '300'}}>Click a song to play it!</h2>\n            }  \n            \n            <div className='mainBody' style={{ margin:'0'}}>\n            <Visualizer currentSong={this.state.currentSong} audio={this.state.audio}/>\n              <SongList \n                user={this.state.user} \n                onSongClicked={this.onSongClicked}\n                savedTracks={this.state.savedTracks}\n              />   \n            </div>\n          \n          </React.Fragment>\n          : <button onClick={() => {\n            window.location =  window.location.href.includes('localhost') \n              ?  'http://localhost:8888/login'\n              : 'https://spoti-visualizer-backend.herokuapp.com/login'\n              }\n            }\n            style={{marginTop: '40vh', fontSize: '3rem', width: '50%', borderRadius: '2em', backgroundColor: 'transparent', color: 'white', border: 'solid white 3px'}}>Sign in with spotify</button>\n        }\n      </div>\n    )\n  }\n}\n  \n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}